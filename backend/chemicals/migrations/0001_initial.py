# Generated by Django 5.1 on 2025-01-08 21:20

import chemicals.util.util
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Chemical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('chem_depiction_image', models.ImageField(null=True, upload_to='depictions/')),
                ('api_id', models.CharField(max_length=14, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Conformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('conf_file', models.FileField(upload_to='confs/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DrugLikeRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('count_lipinski_violation', models.PositiveSmallIntegerField()),
                ('count_ghose_violation', models.PositiveSmallIntegerField()),
                ('count_veber_violation', models.PositiveSmallIntegerField()),
                ('count_egan_violation', models.PositiveSmallIntegerField()),
                ('count_muegge_violation', models.PositiveSmallIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('iupac_name', models.TextField()),
                ('chem_formula', models.TextField()),
                ('inchi', models.TextField()),
                ('inchi_key', models.TextField()),
                ('smiles', models.TextField()),
                ('slug', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Literature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('doi', models.CharField(unique=True)),
                ('title', models.TextField()),
                ('publication_date', models.DateField()),
                ('publication_name', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='P450Inhibition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('cyp1a2_inhibitor', models.BooleanField()),
                ('cyp2c9_inhibitor', models.BooleanField()),
                ('cyp2c19_inhibitor', models.BooleanField()),
                ('cyp2d6_inhibitor', models.BooleanField()),
                ('cyp3a4_inhibitor', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartitionCoefficient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('wildman_crippen_logp', models.FloatField()),
                ('xlogp', models.FloatField()),
                ('jplogp', models.FloatField()),
                ('mouriguchi_logp', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pharmacokinetics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('gastrointestinal_absorption', models.BooleanField()),
                ('blood_brain_barrier_permeation', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhysicalProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('molecular_weight', models.FloatField()),
                ('volume', models.FloatField()),
                ('count_atom', models.PositiveSmallIntegerField()),
                ('count_heteroatom', models.PositiveSmallIntegerField()),
                ('count_heavy_atom', models.PositiveSmallIntegerField()),
                ('count_aromatic_heavy_atom', models.PositiveSmallIntegerField()),
                ('count_rotatable_bond', models.PositiveSmallIntegerField()),
                ('count_h_bond_acceptor', models.PositiveSmallIntegerField()),
                ('count_h_bond_donor', models.PositiveSmallIntegerField()),
                ('count_ring', models.PositiveSmallIntegerField()),
                ('count_carbon', models.PositiveSmallIntegerField()),
                ('mp_lower_bound', models.FloatField(null=True)),
                ('mp_upper_bound', models.FloatField(null=True)),
                ('state_of_matter', models.CharField(blank=True)),
                ('color', models.CharField(blank=True)),
                ('color_hexadecimal', models.CharField(blank=True, validators=[chemicals.util.util.validate_hex_color])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhysicochemicalProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('fraction_csp3', models.FloatField()),
                ('molar_refractivity', models.FloatField()),
                ('tpsa', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QsarScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('qed_score', models.FloatField()),
                ('synthetic_accessibility_score', models.FloatField()),
                ('natural_product_score', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Solubility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('esol_logs', models.FloatField()),
                ('filter_it_logs', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('name', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UndesirableSubstructureAlert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('update_at', models.DateTimeField(auto_now=True)),
                ('api_id', models.CharField(max_length=14, unique=True)),
                ('count_pains_alert', models.PositiveSmallIntegerField()),
                ('count_brenk_alert', models.PositiveSmallIntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
